name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.2'
        cache: true
    
    - name: Install dependencies
      run: make deps
    
    - name: Run tests
      run: make test
    
    - name: Run tests with coverage and check threshold
      id: coverage
      run: |
        echo "Running tests with coverage..."
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html
        
        echo "Checking coverage threshold..."
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${COVERAGE}%"
        
        # Set coverage output for badge
        echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
        
        # Determine badge color based on coverage
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          echo "color=green" >> $GITHUB_OUTPUT
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          echo "color=orange" >> $GITHUB_OUTPUT
        else
          echo "color=red" >> $GITHUB_OUTPUT
        fi
        
        if (( $(echo "$COVERAGE < 20" | bc -l) )); then
          echo "❌ Coverage is below 20% threshold (current: ${COVERAGE}%)"
          exit 1
        else
          echo "✅ Coverage meets 20% threshold (current: ${COVERAGE}%)"
        fi
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m
    
    - name: Verify basic build capability
      run: |
        echo "=== Testing Basic Build Capability ==="
        make dev
        echo ""
        echo "=== Version Information ==="
        ./bin/dockerutilities version 2>/dev/null || echo "Version command not implemented yet"
        echo ""
        echo "=== Binary Information ==="
        file bin/dockerutilities
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
        retention-days: 30
    
    - name: Generate coverage badge
      if: always()
      run: |
        echo "Generating coverage badge..."
        COVERAGE=${{ steps.coverage.outputs.coverage }}
        COLOR=${{ steps.coverage.outputs.color }}
        
        # Create a simple coverage badge (this is a placeholder - in a real setup you'd use a badge service)
        echo "Coverage: ${COVERAGE}% (${COLOR})"
        echo "Badge would be generated here in a production setup"
