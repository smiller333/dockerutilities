name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Required for GoReleaser
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.2'
        cache: true
    
    - name: Validate GoReleaser configuration
      run: |
        echo "Validating GoReleaser configuration..."
        goreleaser check
        echo "Configuration is valid!"
    
    - name: Run tests before release
      run: |
        echo "Running comprehensive tests..."
        go test -v -race -coverprofile=coverage.out ./...
        go vet ./...
        echo "Tests completed successfully!"
    
    - name: Build and test locally (dry run)
      run: |
        echo "Testing GoReleaser build process..."
        goreleaser build --snapshot --clean --parallelism=2
        echo "Local build test completed!"
    
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean --parallelism=2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Enhanced artifact verification
      run: |
        echo "üîç Enhanced artifact verification..."
        
        # Check if release was created
        if [ -f "dist/checksums.txt" ]; then
          echo "‚úÖ Checksums file created"
          echo "Checksums content:"
          cat dist/checksums.txt
        else
          echo "‚ùå Checksums file not found"
          exit 1
        fi
        
        # Verify checksums
        echo "üîê Verifying checksums..."
        cd dist
        if sha256sum -c checksums.txt; then
          echo "‚úÖ All checksums verified successfully"
        else
          echo "‚ùå Checksum verification failed"
          exit 1
        fi
        cd ..
        
        # Check binary count (should be 6 platforms)
        BINARY_COUNT=$(find dist -name "dockerutilities-*" -type f | wc -l)
        echo "üì¶ Found $BINARY_COUNT binaries"
        
        if [ "$BINARY_COUNT" -ge 6 ]; then
          echo "‚úÖ All platform binaries created"
        else
          echo "‚ùå Expected 6 binaries, found $BINARY_COUNT"
          exit 1
        fi
        
        # Enhanced binary testing with comprehensive verification
        echo "üß™ Testing binary functionality across all platforms..."
        
        # Use the comprehensive verification script if it exists
        if [[ -f "scripts/verify-binaries.sh" ]]; then
          chmod +x scripts/verify-binaries.sh
          ./scripts/verify-binaries.sh release ./bin/dockerutilities ./dist
        else
          echo "‚ö†Ô∏è verify-binaries.sh not found, skipping script verification"
        fi
        
        # Basic platform-specific binary verification
        echo "üì¶ Platform-specific binary verification..."
        
        # Check for common platform binaries
        PLATFORM_BINARIES=(
          "dist/dockerutilities_linux_amd64:Linux AMD64"
          "dist/dockerutilities_linux_arm64:Linux ARM64"
          "dist/dockerutilities_darwin_amd64:macOS AMD64"
          "dist/dockerutilities_darwin_arm64:macOS ARM64"
          "dist/dockerutilities_windows_amd64.exe:Windows AMD64"
          "dist/dockerutilities_windows_arm64.exe:Windows ARM64"
        )
        
        for platform_info in "${PLATFORM_BINARIES[@]}"; do
          IFS=':' read -r binary_path platform_name <<< "$platform_info"
          
          if [[ -f "$binary_path" ]]; then
            echo "‚úÖ $platform_name binary exists"
            BINARY_SIZE=$(wc -c < "$binary_path")
            echo "   Size: $BINARY_SIZE bytes"
          else
            echo "‚ö†Ô∏è $platform_name binary missing: $binary_path"
          fi
        done
        
        echo "üéâ Enhanced artifact verification completed!"
    
    - name: Create release summary
      run: |
        echo "üìã Release Summary"
        echo "=================="
        echo "Version: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Platforms: 6 (Linux/macOS/Windows AMD64/ARM64)"
        echo "Artifacts: $(find dist -name 'dockerutilities-*' -type f | wc -l) binaries"
        echo "Checksums: SHA256 verified""
