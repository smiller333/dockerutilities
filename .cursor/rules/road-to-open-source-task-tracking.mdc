---
title: Road to Open Source Task Tracking
description: Ensures completed tasks are marked as completed in road_to_open_source directory files based on current chat session
applies_to:
  - "docs/road_to_open_source/**/*"
always_apply: true
triggers_when:
  - "Any task documented in road_to_open_source guides is completed"
  - "Documentation files mentioned in guides are created/modified"
  - "Implementation work matches tasks in road_to_open_source files"
---

# Road to Open Source Task Tracking Rule

## Purpose

This rule ensures that when working on ANY files in the project, if tasks documented in the `docs/road_to_open_source/` guides are completed, those files are automatically updated with completion markers.

## Rule Scope & Activation

**File Scope:** This rule only modifies files within `docs/road_to_open_source/`

**Activation Triggers:** The rule should activate during a session when:
1. **Any task listed in road_to_open_source guides is completed** (regardless of where the work happens)
2. **Documentation files referenced in the guides are created/modified**
3. **Implementation work matches specific tasks in road_to_open_source checklists**

## Auto-Update Requirements

When tasks documented in road_to_open_source guides are completed ANYWHERE in the project:
1. **Identify** which specific tasks in `docs/road_to_open_source/` files correspond to the completed work
2. **Update** those specific guide files with completion markers
3. **Update** `docs/road_to_open_source/README.md` overview sections
4. **Update** status tables and success criteria in road_to_open_source files ONLY

## Task Mapping (Auto-Detection)

### Phase 1 Documentation Tasks (DOCUMENTATION_STANDARDS_GUIDE.md)
When these files are created/modified, automatically mark corresponding tasks complete:

| File Created/Modified | Task to Mark Complete |
|----------------------|----------------------|
| `INSTALLATION.md` | `INSTALLATION.md` - Comprehensive install guide |
| `TROUBLESHOOTING.md` | `TROUBLESHOOTING.md` - Common issues and solutions |
| `EXAMPLES.md` | Add comprehensive `EXAMPLES.md` |
| `README.md` (enhanced) | Update `README.md` with better examples |
| `DOCKER.md` (fixed) | Fix `DOCKER.md` inconsistencies |

### Cross-File Updates Required
When ANY of the above files are modified, also update (WITHIN docs/road_to_open_source/ ONLY):
- `DOCUMENTATION_STANDARDS_GUIDE.md` task checkboxes
- `README.md` progress sections  
- Implementation status table in README.md
- Success criteria checkboxes

**Important:** This rule ONLY modifies files within `docs/road_to_open_source/` directory.

## Task Completion Requirements

### Immediate Task Marking
When a task is completed in the current chat session:

1. **Update the specific guide file** where the task is documented
2. **Mark with appropriate completion indicator** using standardized format
3. **Update overview files** (README.md) to reflect progress
4. **Add completion timestamp** where beneficial

### Standardized Completion Indicators

#### For Major Sections/Phases
- `‚úÖ COMPLETED` - Full section completion
- `‚úÖ DOCUMENTATION COMPLETED` - Documentation phase done
- `‚úÖ SECURITY COMPLETED` - Security implementation done
- `üöß IN PROGRESS` - Currently being worked on
- `‚ö†Ô∏è PARTIAL` - Partially implemented

#### For Individual Tasks
- `‚úÖ Fixed` - Bug fixes and security issues resolved
- `‚úÖ Enhanced` - Improvements and enhancements completed
- `‚úÖ Added` - New features or documentation created
- `‚úÖ Updated` - Modifications to existing items completed
- `‚úÖ Renamed` - Renaming/refactoring completed
- `‚úÖ Implemented` - Feature implementation completed
- `- [x]` or `- ‚úÖ` - Checklist items completed

#### For Pending Tasks
- `üö´ Required` - Still needs implementation
- `üö´ Recommended` - Optional but beneficial
- `- [ ]` - Uncompleted checklist items

### Priority Levels (maintain consistency)
- üî¥ CRITICAL
- üü° HIGH
- üîµ MEDIUM  
- üü¢ LOW

## Implementation Process

### Step 1: Identify Completed Work
When any implementation work is completed in the current session, immediately identify which documented tasks have been fulfilled.

### Step 2: Update Specific Guide Files
Update the relevant guide file(s) in `docs/road_to_open_source/` with completion markers:

```markdown
Completed tasks:
- ‚úÖ Replace tar command execution with Go native library (Completed: 2025-01-21)
- ‚úÖ Improve path validation for build context
- ‚úÖ Add security warnings for untrusted images
```

### Step 3: Update Overview Documentation
Update `docs/road_to_open_source/README.md` to reflect progress:

```markdown
### Phase 1: Critical Security & Foundation (1-2 days) ‚úÖ **COMPLETED**
```markdown
Priority: üî¥ CRITICAL - ‚úÖ COMPLETED
Completed: SECURITY_IMPLEMENTATION_GUIDE.md

Completed tasks:
- ‚úÖ Replace tar command execution with Go native library
- ‚úÖ Improve path validation for build context  
- ‚úÖ Add security warnings for untrusted images
```

### Step 4: Update Status Tables
When status tables exist, update them accordingly:

| Area | Guide | Status | Priority |
|------|-------|--------|----------|
| **Security** | Security Implementation | ‚úÖ Complete | üî¥ Critical |
| **CLI** | CLI Improvement | ‚úÖ Complete | üü° High |

## File-Specific Requirements

### README.md Updates
- Update implementation status table
- Mark completed phases with ‚úÖ **COMPLETED**
- Update success criteria checkboxes
- Update progress percentages if present

### Individual Guide File Updates  
- Mark specific tasks as completed with appropriate indicators
- Update progress tracking sections
- Add completion context when helpful
- Maintain chronological order of completions

### Cross-File Consistency
Ensure that:
- Overview progress matches individual guide progress
- Status indicators are consistent across files
- Completion timestamps are accurate
- All related documentation reflects the same state

## Proactive Enforcement

### Session End Checklist (AUTOMATIC)
Before ending any session, the AI MUST automatically:

1. **Scan all work completed in current session**
2. **Cross-reference with road_to_open_source task lists**  
3. **Update ALL matching tasks with completion markers**
4. **Verify cross-file consistency**
5. **Update overview files and status tables**

### Mandatory Check Points
The AI should check and update road_to_open_source files ONLY when:
- Creating documentation files mentioned in road_to_open_source guides
- Completing implementation work documented in road_to_open_source tasks
- Before providing final response if any road_to_open_source tasks were completed
- When user explicitly mentions completing tasks from road_to_open_source guides

**Constraint:** Only modify files within `docs/road_to_open_source/` directory.

## Quality Assurance

### Before Completing Session
1. **Verify all completed work is documented** with proper completion markers
2. **Check cross-file consistency** between overview and detailed guides
3. **Ensure completion dates** match implementation timeline
4. **Update any summary sections** that reference the completed work

### Validation Rules
- **Never mark tasks complete** unless actually implemented in current session
- **Always provide context** for complex completions
- **Maintain traceability** between task completion and actual changes
- **Update dependent tasks** when prerequisites are completed

## Examples

### Security Task Completion
When security improvements are implemented:

```markdown
### üü° MEDIUM-003: Replace Command Injection in Tar Extraction ‚úÖ **COMPLETED**

**Status:** ‚úÖ Fixed with Go native archive/tar library (Completed: 2025-01-21)
**Implementation:** Replaced exec.Command("tar") with secure Go native implementation
```

### CLI Improvement Completion
When CLI commands are improved:

```markdown
### Issue 1: Command Naming Convention ‚úÖ **COMPLETED**

**Solution Implemented:** ‚úÖ Renamed `tools` command to `server` (Completed: 2025-01-21)
**Files Updated:** cmd/tools.go renamed to cmd/server.go, documentation updated
```

### Documentation Task Completion
When documentation is created or updated:

```markdown
Completed documentation tasks:
- ‚úÖ Enhanced README.md with modern design and comprehensive examples
- ‚úÖ Created comprehensive API documentation (../API.md)  
- ‚úÖ Added detailed user guide with tutorials (../USER_GUIDE.md)
- ‚úÖ Created complete CLI reference (../CLI_REFERENCE.md)
```

## Error Prevention

### Common Mistakes to Avoid
- Marking tasks complete before actual implementation
- Inconsistent status indicators across files
- Missing updates to overview documentation
- Incorrect completion timestamps
- Forgetting to update related status tables

### Best Practices
- Complete documentation updates immediately after implementation
- Use consistent language and indicators
- Provide sufficient context for future reference
- Cross-reference related tasks when updating status
- Maintain chronological accuracy in completion tracking

This rule ensures accurate progress tracking and maintains the integrity of the road_to_open_source documentation system.